RouterModule
	基本步骤
	导航
	传参
	嵌套
	路由守卫

一、导航（跳转 navigation）
	1.js跳转
		import {Router} from "@angular/router"
		constructor(private router:Router){}
		this.router.navigateByUrl(path);
	2.a标签跳转
		<a routerLink="/orderconfirm">去结算吧</a>
	3.返回上一页
		import { Location } from "@angular/common"
		constructor(private myLoc:Location) { }
		this.myLoc.back();
二、跳转传参
	基本步骤：
		1.明确发送、接收
		2.配置接收方的路由地址
		3.接收参数
		4.发送

三、路由嵌套
	angular:
		可以在路由地址所对应的一个组件中，配置让他允许根据不同的情况，加载其他的组件到当前组件中
		login.component
		mail.component
			inbox.component
			outbox.component
			1.创建要用到的组件
			2.在mail中，指定router-outlet
			3.在对应路由中配置
		基本步骤：
			假设parent.component.ts/son1.component.ts/son2.component.ts 3个组件，在parent组件中，通过路由地址 /parent/son1访问组件son1
			1.创建要用到的三个组件，并去声明
			2.给parent配置路由词典
				{
					path:"parent",component:ParentComponent
				}
			3.在parent组件中指定一个容器，
				<router-outlet></router-outlet>
			4.在parent组件对应的路由配置对象中，加children属性，配置son1和son2
				{
					path:"parent",
					component:ParentComponent,
					children:[
						{path:"",component:Son1Component},
						{path:"son1",component:Son1Component}
					]
				}
		注意事项：
			在angular中，当需要导航到某一个子路由时，需要修改该子路由所属组件的路由地址
				a routerLink = "/parent/son1"
		
四、路由守卫
	通过一些方式来控制路由地址所对应的页面能够访问
	基本步骤
		1.创建一个服务
			import {Injectable} from "@angular/core"
			import {CanActivate}from "@angular/router"
			@Injectable()
			export class TestService implements CanActivate{
				canActivate(){
					return true;
				}
			}
		2.指定providers
			app.module.ts
			import {TestService} from ""
			@NgModule({
				providers:[testService]
			});
		3.使用服务
			{
				path:"admin",
				component:AdminComponent,
				canActivate:[TestService]
			}

angular基本语法：指令、双花括号
组件创建使用复合组件
组件间通信
管道
服务
	将一些经常用到的服务和方法封装到类中
路由模块
依赖注入
	比如A组件需要用到服务：B服务
	B服务就是A组件正常运行时的一个依赖,
	注入就是指的是B服务变成可以直接在A组件中使用的实例
	比如：AppModule需要用到FormsModule
	FormsModule就是AppModule的一个依赖，
	注入就是在AppModule的imports数组中写上FormsModule
	注意事项：让依赖注入进来可被使用，而无需关心依赖的内部实现,降低了耦合度

1.用Angular扩展语法编写HTML模板
2.用组件类管理这些模板
3.用服务添加应用逻辑
4.用服务添加应用逻辑
5.用模块代表

五、轮播图组件
	
